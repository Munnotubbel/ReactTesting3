{"ast":null,"code":"var _jsxFileName = \"/home/Munnotubbel/Github/testing3/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport hookActions from './actions/hookActions';\nimport Input from \"./Input\";\n/**\n * reducer to update state, called automatically by dispatch\n * @param state {object} - existing state \n * @param action {object} - contqains \"type\" and \"payload\" properties for the state update\n *                  for example: {type: \"setSecretWord\", payload: \"party\"}\n * @returns {object} - new state\n */\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"setSecretWord\":\n      return { ...state,\n        secretWord: action.payload\n      };\n\n    default:\n      throw new Error(`Invalid action type : ${action.type}`);\n  }\n}\n\nfunction App() {\n  const [state, dispatch] = React.useReducer(reducer, {\n    secretWord: null\n  });\n\n  const setSecretWord = secretWord => dispatch({\n    type: \"setSecretWord\",\n    payload: secretWord\n  });\n\n  React.useEffect(() => {\n    hookActions.getSecretWord(setSecretWord);\n  }, []);\n  return React.createElement(\"div\", {\n    \"data-test\": \"component-app\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(Input, {\n    secretWord: state.secretWord,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/Munnotubbel/Github/testing3/src/App.js"],"names":["React","hookActions","Input","reducer","state","action","type","secretWord","payload","Error","App","dispatch","useReducer","setSecretWord","useEffect","getSecretWord"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AAEA,OAAOC,KAAP,MAAkB,SAAlB;AAEA;;;;;;;;AAQA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAA+B;AAC7B,UAAOA,MAAM,CAACC,IAAd;AACE,SAAK,eAAL;AACE,aAAO,EAAC,GAAGF,KAAJ;AAAWG,QAAAA,UAAU,EAAEF,MAAM,CAACG;AAA9B,OAAP;;AACA;AACE,YAAM,IAAIC,KAAJ,CAAW,yBAAwBJ,MAAM,CAACC,IAAK,EAA/C,CAAN;AAJN;AAMD;;AAED,SAASI,GAAT,GAAe;AACb,QAAM,CAACN,KAAD,EAAQO,QAAR,IAAoBX,KAAK,CAACY,UAAN,CAAiBT,OAAjB,EAA0B;AAACI,IAAAA,UAAU,EAAE;AAAb,GAA1B,CAA1B;;AAEA,QAAMM,aAAa,GAAIN,UAAD,IACtBI,QAAQ,CAAC;AAACL,IAAAA,IAAI,EAAE,eAAP;AAAwBE,IAAAA,OAAO,EAAED;AAAjC,GAAD,CADR;;AAIAP,EAAAA,KAAK,CAACc,SAAN,CACE,MAAI;AAACb,IAAAA,WAAW,CAACc,aAAZ,CAA0BF,aAA1B;AAAyC,GADhD,EAEE,EAFF;AAIA,SACE;AAAK,iBAAU,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AAAO,IAAA,UAAU,EAAET,KAAK,CAACG,UAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD;;AAED,eAAeG,GAAf","sourcesContent":["import React from 'react';\nimport './App.css';\nimport hookActions from './actions/hookActions';\n\nimport Input from \"./Input\";\n\n/**\n * reducer to update state, called automatically by dispatch\n * @param state {object} - existing state \n * @param action {object} - contqains \"type\" and \"payload\" properties for the state update\n *                  for example: {type: \"setSecretWord\", payload: \"party\"}\n * @returns {object} - new state\n */\n\nfunction reducer(state, action){\n  switch(action.type){\n    case \"setSecretWord\":\n      return {...state, secretWord: action.payload};\n      default:\n        throw new Error(`Invalid action type : ${action.type}`);\n  }\n}\n\nfunction App() {\n  const [state, dispatch] = React.useReducer(reducer, {secretWord: null});\n\n  const setSecretWord = (secretWord)=>\n  dispatch({type: \"setSecretWord\", payload: secretWord});\n\n\n  React.useEffect(\n    ()=>{hookActions.getSecretWord(setSecretWord)},\n    []\n  )\n  return (\n    <div data-test=\"component-app\">\n      <Input secretWord={state.secretWord} />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}